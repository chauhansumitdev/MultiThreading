all we are doing to do is to get use of multitaksing
this can be achieved by
multiprocessing
multithreading

maintaining concurrency between these processes is a heavy task because there a lots of costraints from the memory side as well the os side.
to make things easier we use multithreading because they share the same memory space so not a lot of constraints

make use of the Thread class
available fun() --

start() -- start a Thread
run() run a particular action in a Thread
sleep() sleeps a thread for a certain amount of time


a lot more ... lean as you write..


LIFECYCLE...
the thread will always in any one of the states
new  active blocked/waiting time-waiting terminated

new -- creation of the thread
active -- it contains two states -- 
    runnable -- important stage -- this stage is the stage where is the threads starts exec or is already in exec. This works by the time given by the thread scheduler . Like if its the thread thurn , then if its in runnable stage and it is its first time starting it then the starts from the beginning, if it has already executed for some portion then it is resumed. 

    running -- the stage where the thread is running actually.

 blocked/waiting -- self explanatory -- also it has no time constraint

 time- waiting -- prevents deadlock/ starvation in any case the thread never comes to runnable stage. it is given time-waiting stage.

 termininated -- self explanatory

HOW TO GET THE INFO ABOUT THREAD STATES ...

java.lang.Thread.State -- enum vals -- Thread.getState();
.. ref ThreadStates.java



CREATION 

implements Runnable 
extends Thread 

thread class
constructors
Thread()
Thread(String name) // using the thread class providing the name of the thread
Thread(Runnable r) // the instance is of runnable int.
Thread(Runnable r, String name)

methods :
run start sleep join -- waits for a thread to die getPriority setPriority  getName currentThread getId suspend resume stop isDeamon setDeamon interrupt isInterrupted interrupted





runnable interface:
run() 

when the thread is in the runnable state and it  gets the chance to run it targets the run() method

ref Creation.java



THREAD SCHEDULER : "the guy with responsibilities"
a thread is only chosen by the scheduler if only it is in the runnable state
two factors for scheduling the thread 
Priority and Time of arrival

Priority - lies between 1 and 10. 

arrival of time - it is considered when two threads of same priority are fighting for runtime

CAN WE START A THREAD TWICE --?
no it tried to do so then the thread would give exception.

*** -- each thread starts on a new call stack.. 
if the run method is called directly without invoking the start -- then it goes to the call stack of the current executing stack not the new ones, will work like simple java execution not like a thread.


join() -- waits for a thread to finish before starting the execution




DEAMON 
deamon thread
a service provide thread -- provides services to the user threads.  
its life depends onthe mercy of the user threads that is when all the user threads dies jvm terminates this thead automatically.
low priority thread

THRED POOL --
contains worker threads that need to get asignes a task
after fininshing the task they get back to the thread POOL



SYNCHRONISATION BETWEEN THREADS 
SYNCHRONISATION is the capability to control the access of multiple threads to any shread resource

fixes --
thread interferernce
consistency problem

types --
process SYNCHRONISATION
thread SYNCHRONISATION
    mutual exclusive
        synchronised block
        synchronised method
        static SYNCHRONISATION
    co-operation (inter thread communication)

mutual exclusive 
prevents the interference of the threads while shareing the data



lock concept --
every object has a lock associated with it. 
a thread that needs a consistent access to the objects fields has to acquire the object lock before accessing them and then release the lock when done 

ref Synchronisation.java




